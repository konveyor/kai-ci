name: (Windows)(nonadmin) Run Playwright tests with latest dev build

on:
  schedule:
    - cron: "5 3 * * *"
  workflow_dispatch:
  push:

jobs:
  start-ec2-instance:
    uses: ./.github/workflows/provision-runner.yml
    with:
      ec2-image-id: ami-0cf05b9bbda99aed3
      ec2-instance-type: m5.4xlarge
      security-group-id: sg-0a3e6b53e86d0e69d
      subnet-id: subnet-06113672589e7e836
      ec2-os-type: windows
    secrets:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      github-token: ${{ secrets.GH_RUNNER_API_TOKEN }}
      nonadmin-password: ${{ secrets.NONADMIN_PASSWORD }}


  install-requirements-as-admin:
    needs: start-ec2-instance
    runs-on: ${{ needs.start-ec2-instance.outputs.instance_label }}
    steps:
      - name: Install Node.js
        run: choco install nodejs -y
        shell: powershell

      - name: Install Java
        run: choco install openjdk -y
        shell: powershell

      - name: Install Maven
        run: choco install maven -y
        shell: powershell

      - name: Install Red Hat Java extension
        run: |
          $vscodePath = "C:\Users\nonadmin\AppData\Local\Programs\Microsoft VS Code\bin"
          $env:PATH += ";$vscodePath"
          [Environment]::SetEnvironmentVariable("PATH", $env:PATH, [EnvironmentVariableTarget]::Process)
          code --version
          code --install-extension redhat.java
        shell: powershell

      - name: Disable VSCode extension recommendations for nonadmin
        run: |
          $settingsPath = "C:\Users\nonadmin\AppData\Roaming\Code\User\settings.json"
          if (!(Test-Path $settingsPath) -or (Get-Content $settingsPath -Raw).Trim() -eq "") {
              "{}" | Set-Content -Path $settingsPath
          }
          $rawJson = Get-Content $settingsPath -Raw
          $json = $rawJson | ConvertFrom-Json
          if (-not ($json -is [PSCustomObject])) {
              $json = [PSCustomObject]@{}
          }
          Add-Member -InputObject $json -MemberType NoteProperty -Name "extensions.ignoreRecommendations" -Value $true -Force
          $json | ConvertTo-Json -Depth 10 | Set-Content -Path $settingsPath
        shell: powershell

      - name: Create test execution batch file directly in Windows
        run: |
          $lines = @(
            'set LOG=C:\Users\nonadmin\ci-log.txt',
            'set LOCK=C:\Users\nonadmin\RUNNING.lock',
            'echo Running... > %LOCK%',
            'echo Waiting for explorer.exe... >> %LOG%',
            ':waitloop',
            'tasklist /FI "USERNAME eq nonadmin" | findstr /i "explorer.exe" >nul',
            'if errorlevel 1 (',
            '  timeout /t 5 >nul',
            '  goto waitloop',
            ')',
            'echo Explorer started. >> %LOG%',
            'timeout /t 60  >> %LOG%',
            'set nodePath=C:\Program Files\nodejs',
            'set vscodepath=C:\Users\nonadmin\AppData\Local\Programs\Microsoft VS Code\bin',
            'set PATH=%PATH%;%nodePath%;%vscodepath%',
            'set JAVA_HOME=C:\Program Files\OpenJDK\jdk-22.0.2',
            'set MAVEN_HOME=C:\ProgramData\chocolatey\lib\maven\apache-maven-3.9.9',
            'set PATH=%PATH%;%nodePath%;%vscodepath%;%JAVA_HOME%\bin;%MAVEN_HOME%\bin',
            'set OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}',
            'set PARASOL_API_KEY=${{ secrets.PARASOL_API_KEY }}',
            'set AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}',
            'set AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}',
            'set AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}',
            'if exist C:\Users\nonadmin\kai-ci rmdir /s /q C:\Users\nonadmin\kai-ci',
            'git clone -b ${{ github.head_ref || github.ref_name }} https://github.com/konveyor/kai-ci C:\Users\nonadmin\kai-ci',
            'cd C:\Users\nonadmin\kai-ci',
            'powershell -Command "npm install"',
            'copy .env.example .env',
            'echo OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} >> .env',
            'echo PARASOL_API_KEY=${{ secrets.PARASOL_API_KEY }} >> .env',
            'echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env',
            'echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env',
            'echo AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }} >> .env',
            'echo CI=true >> .env',
            'node scripts/set-latest-vsix-env.mjs >> %LOG% 2>&1',
            'start /wait cmd /c "npx playwright test >> %LOG% 2>&1"',
            'set TEST_EXIT_CODE=%ERRORLEVEL%',
            'echo Done >> %LOG%',
            'del %LOCK%',
            'EXIT /B %TEST_EXIT_CODE%'
          )
          Set-Content -Path C:\Users\nonadmin\execute-tests.bat -Value $lines -Encoding ASCII
        shell: powershell

      - name: Create and run scheduled task to execute tests
        run: |
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" /v AutoAdminLogon /t REG_SZ /d 1 /f
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" /v DefaultUserName /t REG_SZ /d nonadmin /f
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" /v DefaultPassword /t REG_SZ /d ${{ secrets.NONADMIN_PASSWORD }} /f
          $Action = New-ScheduledTaskAction -Execute "cmd.exe" -Argument "/c C:\Users\nonadmin\execute-tests.bat"
          $Trigger = New-ScheduledTaskTrigger -AtLogOn
          $Principal = New-ScheduledTaskPrincipal -UserId "nonadmin" -LogonType Interactive -RunLevel Highest
          Register-ScheduledTask -TaskName "RunVSCodeTests" -Action $Action -Trigger $Trigger -Principal $Principal -Force
          shutdown /r /t 5 /f
        shell: powershell

  run-test-as-nonadmin:
    needs: [ start-ec2-instance, install-requirements-as-admin ]
    runs-on: ubuntu-latest

    steps:
      - name: Install sshpass
        run: sudo apt-get install

      - name: Wait for Windows instance to reboot and be reachable
        run: |
          echo "Waiting for 'nonadmin' to log in with GUI session..."
          sleep 60
          MAX_LOGIN_WAIT=300
          WAITED=0
          
          while true; do
            sshpass -p "${EC2_PASSWORD}" ssh -o StrictHostKeyChecking=no -o LogLevel=ERROR "${EC2_USER}@${{ needs.start-ec2-instance.outputs.ec2-host }}" 'query user 2>$null | findstr /i "nonadmin"' >/dev/null 2>&1
            
            if [ $? -eq 0 ]; then
              echo "User 'nonadmin' has an active session."
              break
            fi
          
            if [ "$WAITED" -ge "$MAX_LOGIN_WAIT" ]; then
              echo "Timeout waiting for nonadmin to log in."
              exit 1
            fi
          
            echo "Waiting for GUI login... (${WAITED}s elapsed)"
            sleep 10
            WAITED=$((WAITED + 10))
          done
        env:
          EC2_USER: nonadmin
          EC2_PASSWORD: ${{ secrets.NONADMIN_PASSWORD }}

      - name: Wait for Playwright tests to complete
        run: |
          sleep 15
          echo "Waiting for Playwright tests to complete..."

          set +e
          MAX_MINUTES=180
          MINUTES=0
          TEST_COMPLETED=0

          while true; do
            sshpass -p "${EC2_PASSWORD}" ssh -o ServerAliveInterval=30 -o ServerAliveCountMax=3 -o StrictHostKeyChecking=no -o LogLevel=ERROR "${EC2_USER}@${{ needs.start-ec2-instance.outputs.ec2-host }}" \
            'if exist C:\Users\nonadmin\RUNNING.lock (exit 0) else (exit 1)'

            SSH_EXIT_CODE=$?

            if [ "$SSH_EXIT_CODE" -ne 0 ]; then
              echo "Tests completed or SSH failed with code $SSH_EXIT_CODE"
              TEST_COMPLETED=1
              break
            fi

            if [ "$MINUTES" -ge "$MAX_MINUTES" ]; then
              echo "Timeout reached after $MAX_MINUTES minutes."
              break
            fi

            echo "Tests still running... (${MINUTES} min)"
            sleep 60
            MINUTES=$((MINUTES + 1))
          done

          echo "Downloading logs..."
          sshpass -p "${EC2_PASSWORD}" scp -o ServerAliveInterval=30 -o ServerAliveCountMax=3 -o StrictHostKeyChecking=no -o LogLevel=ERROR "${EC2_USER}@${{ needs.start-ec2-instance.outputs.ec2-host }}:C:/Users/nonadmin/ci-log.txt" ./ci-log.txt || echo "Failed to download ci-log.txt"
          cat ./ci-log.txt || echo "Log file not found"

          if [ "$TEST_COMPLETED" -eq 0 ]; then
            echo "Test run timed out!"
            exit 1
          fi
        env:
          EC2_USER: nonadmin
          EC2_PASSWORD: ${{ secrets.NONADMIN_PASSWORD }}

      - name: Fetch artifacts
        if: ${{ !cancelled() }}
        run: |
          sshpass -p ${EC2_PASSWORD} scp -o StrictHostKeyChecking=no -r ${EC2_USER}@${{ needs.start-ec2-instance.outputs.ec2-host }}:C:/Users/nonadmin/AppData/Roaming/Code/logs ./vscode-logs
          sshpass -p ${EC2_PASSWORD} scp -o StrictHostKeyChecking=no -r ${EC2_USER}@${{ needs.start-ec2-instance.outputs.ec2-host }}:C:/Users/nonadmin/kai-ci/test-output ./test-output
          sshpass -p ${EC2_PASSWORD} scp -o StrictHostKeyChecking=no -r ${EC2_USER}@${{ needs.start-ec2-instance.outputs.ec2-host }}:C:/Users/nonadmin/kai-ci/coolstore/.vscode ./kai-logs
        env:
          EC2_USER: nonadmin
          EC2_PASSWORD: ${{ secrets.NONADMIN_PASSWORD }}

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: test-output
          path: ./test-output

      - name: Upload VSCode logs
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: vscode-logs
          path: ./vscode-logs

      - name: Upload KAI logs
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: kai-logs
          path: ./kai-logs



  stop-ec2-instance:
    needs: [ start-ec2-instance, install-requirements-as-admin, run-test-as-nonadmin ]
    if: ${{ !cancelled() }}
    uses: ./.github/workflows/remove-runner.yml
    with:
      ec2-instance-id: ${{ needs.start-ec2-instance.outputs.ec2-instance-id }}
      ec2-runner-label: ${{ needs.start-ec2-instance.outputs.instance_label }}
    secrets:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      github-token: ${{ secrets.GH_RUNNER_API_TOKEN }}
