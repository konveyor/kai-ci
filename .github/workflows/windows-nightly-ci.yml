name: Windows Nightly Run

on: [push]

jobs:
  start-ec2-instance:
    uses: ./.github/workflows/provision-runner.yml
    with:
      ec2-image-id: ami-01fa2492704e48175
      ec2-instance-type: t2.micro
      security-group-id: sg-0a3e6b53e86d0e69d
      subnet-id: subnet-06113672589e7e836
      ec2-os-type: windows
    secrets:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      github-token: ${{ secrets.GH_RUNNER_API_TOKEN }}
      nonadmin-password: ${{ secrets.NONADMIN_PASSWORD }}

  run-tests:
    needs: start-ec2-instance
    runs-on: ${{ needs.start-ec2-instance.outputs.instance_label }}
    steps:
      - name: Write Test Script
        shell: powershell
        run: |
          
          # Ensure the directory exists
          if (-not (Test-Path -Path "C:\actions-runner\work")) {
            New-Item -Path "C:\actions-runner\work" -ItemType Directory -Force
          }
          
          $scriptContent = @"

          # Define Node.js and VSCode Paths
          $nodePath = 'C:\Program Files\nodejs'
          #$vscodePath = 'C:/Users/nonadmin/AppData/Local/Programs/Microsoft VS Code/Code.exe'
          $newPath = "$env:PATH;$nodePath;$vscodePath"
          [System.Environment]::SetEnvironmentVariable('PATH', $newPath, [System.EnvironmentVariableTarget]::Process)
          "PATH=$newPath" | Out-File -FilePath $env:GITHUB_ENV -Append

          # Print Current User
          Write-Output "Current User: $(whoami)"

          # Verify VSCode and Node.js Installation
          code --version
          node --version

          # Close All VSCode Instances
          Get-Process -Name "Code" -ErrorAction SilentlyContinue | ForEach-Object { $_.CloseMainWindow() } | Out-Null

          # Create Temporary Work Directory
          New-Item -Path "C:\actions-runner\work" -ItemType Directory -Force

          # Clone kai-ci repo
          cd C:\actions-runner\work
          git clone https://github.com/konveyor/kai-ci.git
          cd ./kai-ci

          # Install npm dependencies
          npm install .
          npm ci

          # Copy .env.example to .env and update executable path
          Copy-Item -Path .env.example -Destination .env
          (Get-Content .env) -replace "VSCODE_EXECUTABLE_PATH=.*", "VSCODE_EXECUTABLE_PATH='C:/Program Files/Microsoft VS Code/Code.exe'" |
          ForEach-Object { $_ -replace "DEFAULT_VSIX_DOWNLOAD_URL=.*", "DEFAULT_VSIX_DOWNLOAD_URL='https://github.com/konveyor/editor-extensions/releases/download/v0.0.1-dev%2B20241022/konveyor-windows-0.0.1.vsix'" } |
          Set-Content .env

          # Run tests
          npx playwright test

          # Clean Up Kai Temp Directory
          Remove-Item -Recurse -Force C:\actions-runner
          "@

          $scriptPath = "C:\actions-runner\work\run-tests.ps1"
          $scriptContent | Out-File -FilePath $scriptPath -Encoding utf8 -Force

      - name: Run Test Script as Non-Admin
        shell: powershell
        run: |
          $password = ConvertTo-SecureString -String "${{ secrets.NONADMIN_PASSWORD }}" -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential("nonadmin", $password)

          # Redirect output to separate log files
          $logPathOut = "C:\actions-runner\work\run-tests-output.log"
          $logPathErr = "C:\actions-runner\work\run-tests-error.log"
          Start-Process -FilePath "powershell.exe" `
                        -ArgumentList "-File C:\actions-runner\work\run-tests.ps1" `
                        -Credential $credential `
                        -NoNewWindow `
                        -RedirectStandardOutput $logPathOut `
                        -RedirectStandardError $logPathErr `
                        -Wait

          # Output log files to GitHub Actions
          Write-Output "--- Standard Output ---"
          Get-Content -Path $logPathOut -Wait
          Write-Output "--- Standard Error ---"
          Get-Content -Path $logPathErr -Wait


  stop-ec2-instance:
    needs: [ start-ec2-instance, run-tests ]
    if: always()
    uses: ./.github/workflows/remove-runner.yml
    with:
      ec2-instance-id: ${{ needs.start-ec2-instance.outputs.ec2-instance-id }}
      ec2-runner-label: ${{ needs.start-ec2-instance.outputs.instance_label }}
    secrets:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      github-token: ${{ secrets.GH_RUNNER_API_TOKEN }}
