name: Provision Windows VM using reusable workflow

on: [push]

jobs:
  start-ec2-instance:
    uses: ./.github/workflows/provision-runner.yml
    with:
      ec2-image-id: ami-01fa2492704e48175
      ec2-instance-type: t2.micro
      security-group-id: sg-0a3e6b53e86d0e69d
      subnet-id: subnet-06113672589e7e836
      ec2-os-type: windows
    secrets:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      github-token: ${{ secrets.GH_RUNNER_API_TOKEN }}

  run-tests:
    needs: [start-ec2-instance]
    runs-on: ${{ needs.start-ec2-instance.outputs.instance_label }}
    env:
      NONADMIN_PASSWORD: ${{ secrets.NONADMIN_PASSWORD }}
    steps:
      - name: Create Temporary Working Directory
        shell: powershell
        run: |
          # Create a new directory under C:\Users\Public\work which doesn't require elevated permissions
          New-Item -Path 'C:\Users\Public\work' -ItemType Directory -Force

      - name: Run Commands as Non-Admin User in Single PowerShell Session
        shell: powershell
        working-directory: C:\Users\Public\work
        run: |
# Define the password as a secure string
          $password = ConvertTo-SecureString -String $env:NONADMIN_PASSWORD -AsPlainText -Force
# Create a credential object
          $credential = New-Object System.Management.Automation.PSCredential('nonadmin', $password)
          
# Start a new PowerShell session as the non-admin user and execute all commands
          Start-Process powershell -Credential $credential -ArgumentList '-NoExit -Command "
# Set Execution Policy and install Chocolatey
            Set-ExecutionPolicy Bypass -Scope Process;
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12;
            iex ((New-Object System.Net.WebClient).DownloadString(''https://community.chocolatey.org/install.ps1''));
          
            # Install VSCode
#            choco install vscode -y;

            # Install Node.js
#            choco install nodejs -y;

            # Define Node.js and VSCode Paths
#            $nodePath = ''C:\Program Files\nodejs'';
#            $vscodePath = ''C:\Program Files\Microsoft VS Code\bin'';
#            $newPath = "$env:PATH;$nodePath;$vscodePath";
#            [System.Environment]::SetEnvironmentVariable(''PATH'', $newPath, [System.EnvironmentVariableTarget]::Process);
#            "PATH=$newPath" | Out-File -FilePath $env:GITHUB_ENV -Append;

            # Verify VSCode and Node.js Installation
            code --version;
            node --version;
          
            # Clone kai-ci Repo
            mkdir ./kai-ci-temp;
            cd ./kai-ci-temp;
            git clone https://github.com/konveyor/kai-ci.git;
          
            # Run Tests
            cd kai-ci;
            npm install .;
            npm ci;
               
            # copy .ev.example to .env
            Copy-Item -Path .env.example -Destination .env
            (Get-Content .env) -replace "VSCODE_EXECUTABLE_PATH=.*", "VSCODE_EXECUTABLE_PATH='C:/Users/nonadmin/AppData/Local/Programs/Microsoft VS Code/Code.exe'" | Set-Content .env
               
            # run tests
            try {
              npx playwright test;
            } catch {
              Write-Host ''Playwright tests failed, but continuing workflow.'';
            }
          
          # Clean up Temporary Working Directory
            Remove-Item -Recurse -Force C:\Users\Public\work;
          "'
  stop-ec2-instance:
    needs: [ start-ec2-instance,run-tests ]
    if: always()
    uses: ./.github/workflows/remove-runner.yml
    with:
      ec2-instance-id: ${{ needs.start-ec2-instance.outputs.ec2-instance-id }}
      ec2-runner-label: ${{ needs.start-ec2-instance.outputs.instance_label }}
    secrets:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      github-token: ${{ secrets.GH_RUNNER_API_TOKEN }}