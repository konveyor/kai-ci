name: Provision EC2 VM

on:
  workflow_call:
    inputs:
      ec2-image-id:
        description: 'The AMI ID for the EC2 instance'
        required: true
        type: string
      ec2-os-type:
        description: 'The os type of the ec2 instance (windows/linux)'
        required: true
        type: string
      ec2-instance-type:
        description: 'The instance type for the EC2 instance'
        required: true
        type: string
      aws-region:
        description: 'AWS Region'
        required: false
        type: string
        default: us-east-1
      security-group-id:
        description: 'Security group for the EC2 instance'
        required: true
        type: string
      subnet-id:
        description: 'Subnet ID for the EC2 instance'
        required: true
        type: string
    secrets:
      aws-access-key-id:
        description: 'AWS Access Key ID'
        required: true
      aws-secret-access-key:
        description: 'AWS Secret Access Key'
        required: true
      github-token:
        description: 'Personal Access Token For GH'
        required: true
      nonadmin-password:
        description: 'Password for the nonadmin user'
        required: true
    outputs:
      instance_label:
        description: "The label of the VM that was created."
        value: ${{ jobs.provision-ec2.outputs.label }}
      ec2-instance-id:
        description: "Instance id of the VM that was created."
        value: ${{ jobs.provision-ec2.outputs.instance_id }}

jobs:
  provision-ec2:
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.ec2.outputs.ec2-instance-id }}
      label: ${{ steps.ec2.outputs.label }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}  # Default is us-east-1

      - name: Start EC2 GitHub runner
        id: ec2
        uses: crunchy234/ec2-github-runner@main
        with:
          mode: start
          github-token: ${{ secrets.github-token }}
          ec2-os: ${{ inputs.ec2-os-type }}
          ec2-instance-type: ${{ inputs.ec2-instance-type }}
          ec2-image-id: ${{ inputs.ec2-image-id }}
          subnet-id: ${{ inputs.subnet-id }}
          security-group-id: ${{ inputs.security-group-id }}

      - name: Output EC2 Instance ID
        run: |
          echo "EC2 Instance ID: ${{ steps.ec2.outputs.ec2-instance-id }}"
          echo "Label : ${{ steps.ec2.outputs.label }}"

  configure-ec2:
    needs: provision-ec2
    runs-on: ${{ needs.provision-ec2.outputs.label }}
    steps:
      - name: Set Up GitHub Actions Runner as Non-Admin User
        shell: powershell
        env:
          NONADMIN_PASSWORD: ${{ secrets.nonadmin-password }}
        run: |
          try {
            # Initial delay to allow the GitHub Actions Runner service to start
            Write-Output "Waiting for GitHub Actions Runner service to initialize..."
            Start-Sleep -Seconds 90

            # Log in as non-admin user
            $password = ConvertTo-SecureString "$env:NONADMIN_PASSWORD" -AsPlainText -Force
            $credential = New-Object System.Management.Automation.PSCredential("nonadmin", $password)

            # Step 1: Create runner directory as non-admin
            Start-Process -FilePath "powershell.exe" -ArgumentList "-Command", {
              if (-not (Test-Path -Path 'C:\actions-runner')) {
                New-Item -ItemType Directory -Force -Path 'C:\actions-runner'
                Write-Output "Runner directory created."
              } else {
                Write-Output "Runner directory already exists."
              }
            } -Credential $credential -NoNewWindow -Wait

            # Step 2: Download GitHub Actions runner as non-admin
            Start-Process -FilePath "powershell.exe" -ArgumentList "-Command", {
              Write-Output "Downloading GitHub Actions runner..."
              Invoke-WebRequest -Uri "https://github.com/actions/runner/releases/download/v2.292.0/actions-runner-win-x64-2.292.0.zip" -OutFile "C:\actions-runner\actions-runner.zip"
              Write-Output "Download complete."
            } -Credential $credential -NoNewWindow -Wait

            # Step 3: Extract runner package as non-admin
            Start-Process -FilePath "powershell.exe" -ArgumentList "-Command", {
              Write-Output "Extracting GitHub Actions runner package..."
              Expand-Archive -Path "C:\actions-runner\actions-runner.zip" -DestinationPath "C:\actions-runner"
              Remove-Item "C:\actions-runner\actions-runner.zip"
              Write-Output "Extraction complete."
            } -Credential $credential -NoNewWindow -Wait

            # Step 4: Configure GitHub Actions runner as non-admin
            Start-Process -FilePath "powershell.exe" -ArgumentList "-Command", {
              Write-Output "Configuring the GitHub Actions runner..."
              & "C:\actions-runner\config.cmd" --url https://github.com/YOUR_ORG/YOUR_REPO --token YOUR_TOKEN
              Write-Output "Runner configuration completed."
            } -Credential $credential -NoNewWindow -Wait

            # Step 5: Run the GitHub Actions runner as non-admin
            Start-Process -FilePath "C:\actions-runner\run.cmd" -Credential $credential -NoNewWindow
            Write-Output "Runner is now running under non-admin user."
          } catch {
            Write-Error "Failed to set up the runner as non-admin user: $_.Exception.Message"
            exit 1
          }
