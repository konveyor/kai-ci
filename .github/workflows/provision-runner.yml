name: Provision EC2 VM

on:
  workflow_call:
    inputs:
      ec2-image-id:
        description: 'The AMI ID for the EC2 instance'
        required: true
        type: string
      ec2-os-type:
        description: 'The os type of the ec2 instance (windows/linux)'
        required: true
        type: string
      ec2-instance-type:
        description: 'The instance type for the EC2 instance'
        required: true
        type: string
      aws-region:
        description: 'AWS Region'
        required: false
        type: string
        default: us-east-1
      security-group-id:
        description: 'Security group for the EC2 instance'
        required: true
        type: string
      subnet-id:
        description: 'Subnet ID for the EC2 instance'
        required: true
        type: string
    secrets:
      aws-access-key-id:
        description: 'AWS Access Key ID'
        required: true
      aws-secret-access-key:
        description: 'AWS Secret Access Key'
        required: true
      github-token:
        description: 'Personal Access Token For GH'
        required: true
    outputs:
      instance_label: 
        description: "The label of the VM that was created."
        value: ${{ jobs.provision-ec2.outputs.label }}
      ec2-instance-id: 
        description: "Instance id of the VM that was created."
        value: ${{ jobs.provision-ec2.outputs.instance_id }}

jobs:
  provision-ec2:
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.ec2.outputs.ec2-instance-id }}
      label: ${{ steps.ec2.outputs.label }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}  # Default is us-east-1

      - name: Start EC2 GitHub runner
        id: ec2
        uses: crunchy234/ec2-github-runner@main
        with:
          mode: start
          github-token: ${{ secrets.github-token }}
          ec2-os: ${{ inputs.ec2-os-type }}
          ec2-instance-type: ${{ inputs.ec2-instance-type }}        
          ec2-image-id: ${{ inputs.ec2-image-id }}
          subnet-id: ${{ inputs.subnet-id }}
          security-group-id: ${{ inputs.security-group-id }}

      - name: Output EC2 Instance ID
        run: |
          echo "EC2 Instance ID: ${{ steps.ec2.outputs.ec2-instance-id }}"
          echo "Label : ${{ steps.ec2.outputs.label }}"

  configure-ec2:
    needs: provision-ec2
    runs-on: ${{ needs.provision-ec2.outputs.label }}
    steps:
      - name: Reconfigure Runner Service to Use Non-Admin User
        shell: powershell
        env:
          NONADMIN_PASSWORD: ${{ secrets.nonadmin-password }}
        run: |
          try {
            # List all services with detailed information to identify the runner service
            Write-Output "Listing all available services to identify the GitHub Actions Runner service..."
            Get-Service | Select-Object Name, DisplayName, Status, StartName

            # Attempt to find the GitHub Actions Runner service with a broader match
            Write-Output "Attempting to find the GitHub Actions Runner service..."
            $serviceName = Get-Service | Where-Object {
                ($_.DisplayName -like '*GitHub*Runner*') -or ($_.Name -like '*actions.runner*') -or ($_.DisplayName -like '*actions*') -or ($_.Name -like '*runner*')
            } | Select-Object -ExpandProperty Name -First 1
          
            if (-not $serviceName) {
              Write-Error "GitHub Actions runner service not found. Please verify the runner service name."
              exit 1
            }

            # Stop the GitHub Actions Runner service
            Write-Output "Stopping GitHub Actions Runner service: $serviceName"
            Stop-Service -Name $serviceName -Force
            Write-Output "Service stopped: $serviceName"

            # Update the service to use the nonadmin user credentials
            Write-Output "Reconfiguring the service to use nonadmin user..."
            sc.exe config $serviceName obj= ".\nonadmin" password= "$env:NONADMIN_PASSWORD"
            Write-Output "Service reconfiguration command executed."

            # Start the GitHub Actions Runner service again
            Start-Service -Name $serviceName
            Write-Output "Service restarted successfully."

            # Verify service configuration
            $updatedService = Get-Service -Name $serviceName | Select-Object Name, StartName
            Write-Output "Service details: $($updatedService.Name) - Running as $($updatedService.StartName)"
          } catch {
            Write-Host "Failed to configure the runner service: $_.Exception.Message"
          }
