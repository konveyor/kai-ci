name: Provision EC2 VM

on:
  workflow_call:
    inputs:
      ec2-image-id:
        description: 'The AMI ID for the EC2 instance'
        required: true
        type: string
      ec2-os-type:
        description: 'The os type of the ec2 instance (windows/linux)'
        required: true
        type: string
      ec2-instance-type:
        description: 'The instance type for the EC2 instance'
        required: true
        type: string
      aws-region:
        description: 'AWS Region'
        required: false
        type: string
        default: us-east-1
      security-group-id:
        description: 'Security group for the EC2 instance'
        required: true
        type: string
      subnet-id:
        description: 'Subnet ID for the EC2 instance'
        required: true
        type: string
    secrets:
      aws-access-key-id:
        description: 'AWS Access Key ID'
        required: true
      aws-secret-access-key:
        description: 'AWS Secret Access Key'
        required: true
      github-token:
        description: 'Personal Access Token For GH'
        required: true
      nonadmin-password:
        description: 'Password for the non-admin user'
        required: true
    outputs:
      instance_label:
        description: "The label of the VM that was created."
        value: ${{ jobs.provision-ec2.outputs.label }}
      ec2-instance-id:
        description: "Instance id of the VM that was created."
        value: ${{ jobs.provision-ec2.outputs.instance_id }}

jobs:
  provision-ec2:
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.ec2.outputs.ec2-instance-id }}
      label: ${{ steps.ec2.outputs.label }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}  # Default is us-east-1

      - name: Start EC2 GitHub runner
        id: ec2
        uses: crunchy234/ec2-github-runner@main
        with:
          mode: start
          github-token: ${{ secrets.github-token }}
          ec2-os: ${{ inputs.ec2-os-type }}
          ec2-instance-type: ${{ inputs.ec2-instance-type }}
          ec2-image-id: ${{ inputs.ec2-image-id }}
          subnet-id: ${{ inputs.subnet-id }}
          security-group-id: ${{ inputs.security-group-id }}
          pre-runner-script: |
            <powershell>
            # Step 1: Create the test user
            net user testuser ${{ secrets.nonadmin-password }} /add
            net localgroup "Remote Desktop Users" testuser /add
            net localgroup "Users" testuser /add

            # Step 2: Download and set up the GitHub Actions runner as the non-admin user
            $runnerPath = "C:\actions-runner"
            if (-not (Test-Path -Path $runnerPath)) {
              New-Item -ItemType Directory -Force -Path $runnerPath
            }
            Invoke-WebRequest -Uri "https://github.com/actions/runner/releases/download/v2.292.0/actions-runner-win-x64-2.292.0.zip" -OutFile "$runnerPath\actions-runner.zip"
            Expand-Archive -Path "$runnerPath\actions-runner.zip" -DestinationPath $runnerPath
            Remove-Item "$runnerPath\actions-runner.zip"

            # Step 3: Configure the runner with test user credentials
            $password = ConvertTo-SecureString -String "${{ secrets.nonadmin-password }}" -AsPlainText -Force
            $credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "testuser", $password

            Start-Process -FilePath "$runnerPath\config.cmd" -ArgumentList "--url https://github.com/YOUR_ORG/YOUR_REPO --token ${{ secrets.github-token }}" -Credential $credential -NoNewWindow -Wait

            # Step 4: Run the GitHub Actions runner as the test user
            Start-Process -FilePath "$runnerPath\run.cmd" -Credential $credential -NoNewWindow
            </powershell>

      - name: Output EC2 Instance ID
        run: |
          echo "EC2 Instance ID: ${{ steps.ec2.outputs.ec2-instance-id }}"
          echo "Label : ${{ steps.ec2.outputs.label }}"
