name: Provision EC2 VM

on:
  workflow_call:
    inputs:
      ec2-image-id:
        description: 'The AMI ID for the EC2 instance'
        required: true
        type: string
      ec2-os-type:
        description: 'The os type of the ec2 instance (windows/linux)'
        required: true
        type: string
      ec2-instance-type:
        description: 'The instance type for the EC2 instance'
        required: true
        type: string
      aws-region:
        description: 'AWS Region'
        required: false
        type: string
        default: us-east-1
      security-group-id:
        description: 'Security group for the EC2 instance'
        required: true
        type: string
      subnet-id:
        description: 'Subnet ID for the EC2 instance'
        required: true
        type: string
    secrets:
      aws-access-key-id:
        description: 'AWS Access Key ID'
        required: true
      aws-secret-access-key:
        description: 'AWS Secret Access Key'
        required: true
      github-token:
        description: 'Personal Access Token For GH'
        required: true
      nonadmin-password:
        description: 'Password for the nonadmin user'
        required: true
    outputs:
      instance_label:
        description: "The label of the VM that was created."
        value: ${{ jobs.provision-ec2.outputs.label }}
      ec2-instance-id:
        description: "Instance id of the VM that was created."
        value: ${{ jobs.provision-ec2.outputs.instance_id }}

jobs:
  provision-ec2:
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.ec2.outputs.ec2-instance-id }}
      label: ${{ steps.ec2.outputs.label }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}  # Default is us-east-1

      - name: Start EC2 GitHub runner
        id: ec2
        uses: crunchy234/ec2-github-runner@main
        with:
          mode: start
          github-token: ${{ secrets.github-token }}
          ec2-os: ${{ inputs.ec2-os-type }}
          ec2-instance-type: ${{ inputs.ec2-instance-type }}
          ec2-image-id: ${{ inputs.ec2-image-id }}
          subnet-id: ${{ inputs.subnet-id }}
          security-group-id: ${{ inputs.security-group-id }}

      - name: Output EC2 Instance ID
        run: |
          echo "EC2 Instance ID: ${{ steps.ec2.outputs.ec2-instance-id }}"
          echo "Label : ${{ steps.ec2.outputs.label }}"

  configure-ec2:
    needs: provision-ec2
    runs-on: ${{ needs.provision-ec2.outputs.label }}
    steps:
      - name: Reconfigure Runner Service to Use Non-Admin User
        shell: powershell
        env:
          NONADMIN_PASSWORD: ${{ secrets.nonadmin-password }}
        run: |
          try {
            # Initial delay to allow the GitHub Actions Runner service to start
            Write-Output "Waiting for GitHub Actions Runner service to initialize..."
            Start-Sleep -Seconds 90

            # Run everything from here under the non-admin context
            $password = ConvertTo-SecureString "$env:NONADMIN_PASSWORD" -AsPlainText -Force
            $credential = New-Object System.Management.Automation.PSCredential("nonadmin", $password)

            # Creating a new PowerShell session under the non-admin user to execute all commands
            Write-Output "Switching to non-admin context for further operations..."
            $session = New-PSSession -Credential $credential

            # Script block to run as non-admin
            $scriptBlock = {
              # Print the current user context
              Write-Output "Current User Context:"
              whoami

              # Create runner installation directory if it doesn't exist
              Write-Output "Checking if runner directory exists..."
              if (-not (Test-Path -Path "C:\actions-runner")) {
                Write-Output "Runner directory not found, creating directory..."
                try {
                  New-Item -ItemType Directory -Force -Path "C:\actions-runner" -Verbose
                  Write-Output "Runner directory created successfully."
                } catch {
                  Write-Error "Failed to create runner directory: $_.Exception.Message"
                  exit 1
                }
              } else {
                Write-Output "Runner directory already exists."
              }

              # Download and install the GitHub Actions runner manually
              try {
                Write-Output "Downloading GitHub Actions runner package..."
                Invoke-WebRequest -Uri "https://github.com/actions/runner/releases/download/v2.292.0/actions-runner-win-x64-2.292.0.zip" -OutFile "C:\actions-runner\actions-runner.zip" -Verbose
                Write-Output "Download completed successfully."

                # Extract runner
                Write-Output "Extracting runner package..."
                Expand-Archive -Path "C:\actions-runner\actions-runner.zip" -DestinationPath "C:\actions-runner" -Verbose
                Remove-Item "C:\actions-runner\actions-runner.zip"
                Write-Output "Extraction completed successfully."

                # Configure runner
                Write-Output "Running GitHub Actions runner configuration script..."
                Start-Process -FilePath "C:\actions-runner\config.cmd" -ArgumentList "--url https://github.com/YOUR_ORG/YOUR_REPO", "--token YOUR_TOKEN" -Wait -RedirectStandardOutput "C:\actions-runner\config-output.log" -RedirectStandardError "C:\actions-runner\config-error.log"
                Write-Output "Runner configuration completed."

              } catch {
                Write-Error "Failed to install or configure the runner: $_.Exception.Message"
                exit 1
              }
          
              # Stopping and reconfiguring the runner service to run as non-admin
              Write-Output "Stopping GitHub Actions Runner service..."
              $serviceName = Get-Service -Name '*runner*' -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Name
          
              if ($serviceName) {
                Stop-Service -Name $serviceName -Force
                Write-Output "Service stopped: $serviceName"

                # Reconfigure the service to use the non-admin user credentials
                Write-Output "Reconfiguring the service to use nonadmin user..."
                sc.exe config $serviceName obj= ".\nonadmin" password= "$env:NONADMIN_PASSWORD"
                Write-Output "Service reconfiguration command executed."

                # Start the GitHub Actions Runner service again
                Start-Service -Name $serviceName
                Write-Output "Service restarted successfully."

                # Verify that the service is running under the non-admin user
                $updatedService = Get-Service -Name $serviceName | Select-Object Name, StartName
                Write-Output "Service details: $($updatedService.Name) - Running as $($updatedService.StartName)"

                if ($updatedService.StartName -eq ".\\nonadmin") {
                  Write-Output "Service successfully running as non-admin user."
                } else {
                  Write-Output "Service is not running as nonadmin, please verify manually."
                }
              } else {
                Write-Error "GitHub Actions runner service not found."
              }
            }

            # Invoke the script block as the non-admin user
            Invoke-Command -Session $session -ScriptBlock $scriptBlock

            # Remove the PowerShell session
            Remove-PSSession -Session $session

          } catch {
            # Handle the case where reconfiguration fails completely
            Write-Host "Failed to configure the runner service: $_.Exception.Message"
            exit 1
          }
